{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Oblique;\f4\fmodern\fcharset0 Courier-BoldOblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red38\green38\blue38;
\red8\green8\blue8;\red122\green0\blue16;\red96\green96\blue96;\red49\green49\blue49;\red184\green91\blue94;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c20000\c20000\c20000;
\cssrgb\c2745\c2745\c2745;\cssrgb\c55686\c0\c7059;\cssrgb\c45098\c45098\c45098;\cssrgb\c25098\c25098\c25098;\cssrgb\c77647\c44314\c44314;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\vieww11960\viewh11040\viewkind0
\deftab720
\pard\pardeftab720\sl480\sa1000\partightenfactor0

\f0\b\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Preface\
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \strokec4 You may be wondering who we are and why we wrote this book.\
At the end of Harry\'92s last book,\'a0{\field{\*\fldinst{HYPERLINK "http://obeythetestinggoat.com/"}}{\fldrslt 
\i \cf5 \strokec5 Test-Driven Development with Python}}\'a0(O\'92Reilly), he found himself asking a bunch of questions about architecture, such as, What\'92s the best way of structuring your application so that it\'92s easy to test? More specifically, so that your core business logic is covered by unit tests, and so that you minimize the number of integration and end-to-end tests you need? He made vague references to \'93Hexagonal Architecture\'94 and \'93Ports and Adapters\'94 and \'93Functional Core, Imperative Shell,\'94 but if he was honest, he\'92d have to admit that these weren\'92t things he really understood or had done in practice.\
And then he was lucky enough to run into Bob, who has the answers to all these questions.\
Bob ended up a software architect because nobody else on his team was doing it. He turned out to be pretty bad at it, but\'a0
\i he
\i0 \'a0was lucky enough to run into Ian Cooper, who taught him new ways of writing and thinking about code.\
\pard\pardeftab720\sl623\sa160\partightenfactor0

\f0\b\fs49 \cf6 \strokec6 Managing Complexity, Solving Business Problems\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 We both work for MADE.com, a European ecommerce company that sells furniture online; there, we apply the techniques in this book to build distributed systems that model real-world business problems. Our example domain is the first system Bob built for MADE, and this book is an attempt to write down all the\'a0
\i stuff
\i0 \'a0we have to teach new programmers when they join one of our teams.\cb1 \
\cb3 MADE.com operates a global supply chain of freight partners and manufacturers. To keep costs low, we try to optimize the delivery of stock to our warehouses so that we don\'92t have unsold goods lying around the place.\cb1 \
\cb3 Ideally, the sofa that you want to buy will arrive in port on the very day that you decide to buy it, and we\'92ll ship it straight to your house without ever storing it.\'a0Getting\'a0the timing right is a tricky balancing act when goods take three months to arrive by container ship. Along the way, things get broken or water damaged, storms cause unexpected delays, logistics partners mishandle goods, paperwork goes missing, customers change their minds and amend their orders, and so on.\cb1 \
\cb3 We solve those problems by building intelligent software representing the kinds of operations taking place in the real world so that we can automate as much of the business as possible.\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0

\f0\b\fs49 \cf6 \cb3 \strokec6 Why Python?\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 If you\'92re reading this book, we probably don\'92t need to convince you that Python is great, so the real question is \'93Why does the\'a0
\i Python
\i0 \'a0community need a book like this?\'94 The answer is about Python\'92s popularity and maturity: although Python is probably the world\'92s fastest-growing programming language and is nearing the top of the absolute popularity tables, it\'92s only just starting to take on the kinds of problems that the C# and Java world has been working on for years. Startups become real businesses; web apps and scripted automations are becoming (whisper it)\'a0
\i enterprise
\i0 \'a0
\i software
\i0 .\cb1 \
\cb3 In the Python world, we often quote the Zen of Python: \'93There should be one\'97and preferably only one\'97obvious way to do it.\'94{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/preface01.html#idm45846324852872"}}{\fldrslt 
\f0\fs28\fsmilli14160 \cf6 \strokec6 1}}\'a0Unfortunately, as project size grows, the most obvious way of doing things isn\'92t always the way that helps you manage complexity and evolving requirements.\cb1 \
\cb3 None of the techniques and patterns we discuss in this book are new, but they are mostly new to the Python world. And this book isn\'92t a replacement for the classics in the field such as Eric Evans\'92s\'a0
\i Domain-Driven Design
\i0 \'a0or Martin Fowler\'92s\'a0
\i Patterns of Enterprise Application Architecture
\i0 \'a0(both published by Addison-Wesley\'a0Professional)\'97which we often refer to and encourage you to go and read.\cb1 \
\cb3 But all the classic code examples in the literature do tend to be written in Java or\'a0C++/#, and if you\'92re a Python person and haven\'92t used either of those languages in a long time (or indeed ever), those code listings can be quite\'85trying. There\'92s a reason the latest edition of that other classic text, Fowler\'92s\'a0
\i Refactoring
\i0 \'a0(Addison-Wesley Professional), is in JavaScript.\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0

\f0\b\fs49 \cf6 \cb3 \strokec6 TDD, DDD, and Event-Driven Architecture\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 In order of notoriety, we know of three tools for managing complexity:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl623\partightenfactor0
\ls1\ilvl0
\i \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Test-driven development
\i0 \'a0(TDD) helps us to build code that is correct and enables us to refactor or add new features, without fear of regression. But it can be hard to get the best out of our tests: How do we make sure that they run as fast as possible? That we get as much coverage and feedback from fast, dependency-free unit tests and have the minimum number of slower, flaky end-to-end tests?\cb1 \uc0\u8232 \
\ls1\ilvl0
\i \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Domain-driven design
\i0 \'a0(DDD) asks us to focus our efforts on building a good model of the business domain, but how do we make sure that our models aren\'92t encumbered with infrastructure concerns and don\'92t become hard to change?\cb1 \uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl623\partightenfactor0
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Loosely coupled (micro)services integrated via messages (sometimes called\'a0
\i reactive microservices
\i0 ) are a well-established answer to managing complexity across multiple applications or business domains. But it\'92s not always obvious how to make them fit with the established tools of the Python world\'97Flask, Django, Celery, and so on.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl623\sa120\qc\partightenfactor0

\f0\b\fs41\fsmilli20768 \cf7 \cb3 \strokec7 NOTE\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 Don\'92t be put off if you\'92re not working with (or interested in) microservices. The vast majority of the patterns we discuss, including much of the event-driven architecture material, is absolutely applicable in a monolithic architecture.\cb1 \
\cb3 Our aim with this book is to introduce several classic architectural patterns and show how they support TDD, DDD, and event-driven services. We hope it will serve as a reference for implementing them in a Pythonic way, and that people can use it as a first step toward further research in this field.\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0

\f0\b\fs49 \cf6 \cb3 \strokec6 Who Should Read This Book\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 Here are a few things we assume about you, dear reader:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl623\partightenfactor0
\ls2\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 You\'92ve been close to some reasonably complex Python applications.\cb1 \uc0\u8232 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 You\'92ve seen some of the pain that comes with trying to manage that complexity.\cb1 \uc0\u8232 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 You don\'92t necessarily know anything about DDD or any of the classic application architecture patterns.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl623\sa472\partightenfactor0
\cf4 \cb3 We structure our explorations of architectural patterns around an example app, building it up chapter by chapter. We use TDD at work, so we tend to show listings of tests first, followed by implementation. If you\'92re not used to working test-first, it may feel a little strange at the beginning, but we hope you\'92ll soon get used to seeing code \'93being used\'94 (i.e., from the outside) before you see how it\'92s built on the inside.\cb1 \
\cb3 We use some specific Python frameworks and technologies, including Flask, SQLAlchemy, and pytest, as well as Docker and Redis. If you\'92re already familiar with them, that won\'92t hurt, but we don\'92t think it\'92s required. One of our main aims with this book is to build an architecture for which specific technology choices become minor implementation details.\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0

\f0\b\fs49 \cf6 \cb3 \strokec6 A Brief Overview of What You\'92ll Learn\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 The book is divided into two parts; here\'92s a look at the topics we\'92ll cover and the chapters they live in.\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/part01.html#part1"}}{\fldrslt 
\f0\b\fs41\fsmilli20768 \cf5 \cb3 \strokec5 Part\'a0I,\'a0
\i Building an Architecture to Support Domain Modeling}}
\f0\b\fs41\fsmilli20768 \cf8 \strokec8 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\i\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 Domain modeling and DDD (Chapters\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch01.html#chapter_01_domain_model"}}{\fldrslt \cf5 \strokec5 1}}\'a0and\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch07.html#chapter_07_aggregate"}}{\fldrslt \cf5 \strokec5 7}})\cb1 \
\pard\pardeftab720\sl623\sa200\partightenfactor0

\i0 \cf4 \cb3 At some level, everyone has learned the lesson that complex business problems need to be reflected in code, in the form of a model of the domain. But why does it always seem to be so hard to do without getting tangled up with infrastructure concerns, our web frameworks, or whatever else? In the first chapter we give a broad overview of\'a0
\i domain modeling
\i0 \'a0and DDD, and we show how to get started with a model that has no external dependencies, and fast unit tests. Later we return to DDD patterns to discuss how to choose the right aggregate, and how this choice relates to questions of data integrity.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb3 Repository, Service Layer, and Unit of Work patterns (Chapters\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch02.html#chapter_02_repository"}}{\fldrslt \cf5 \strokec5 2}},\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch04.html#chapter_04_service_layer"}}{\fldrslt \cf5 \strokec5 4}}, and\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch05.html#chapter_05_high_gear_low_gear"}}{\fldrslt \cf5 \strokec5 5}})\cb1 \
\pard\pardeftab720\sl623\sa200\partightenfactor0

\i0 \cf4 \cb3 In these three chapters we present three closely related and mutually reinforcing patterns that support our ambition to keep the model free of extraneous dependencies. We build a layer of abstraction around persistent storage, and we build a service layer to define the entrypoints to our system and capture the primary use cases. We show how this layer makes it easy to build thin entrypoints to our system, whether it\'92s a Flask API or a CLI.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb3 Some thoughts on testing and abstractions (Chapters\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch03.html#chapter_03_abstractions"}}{\fldrslt \cf5 \strokec5 3}}\'a0and\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch06.html#chapter_06_uow"}}{\fldrslt \cf5 \strokec5 6}})\cb1 \
\pard\pardeftab720\sl623\sa200\partightenfactor0

\i0 \cf4 \cb3 After presenting the first abstraction (the Repository pattern), we take the opportunity for a general discussion of how to choose abstractions, and what their role is in choosing how our software is coupled together. After we introduce the Service Layer pattern, we talk a bit about achieving a\'a0
\i test pyramid
\i0 \'a0and writing unit tests at the highest possible level of abstraction.\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/part02.html#part2"}}{\fldrslt 
\f0\b\fs41\fsmilli20768 \cf5 \cb3 \strokec5 Part\'a0II,\'a0
\i Event-Driven Architecture}}
\f0\b\fs41\fsmilli20768 \cf8 \strokec8 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\i\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 Event-driven architecture (Chapters\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch08.html#chapter_08_events_and_message_bus"}}{\fldrslt \cf5 \strokec5 8}}\'96{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch11.html#chapter_11_external_events"}}{\fldrslt \cf5 \strokec5 11}})\cb1 \
\pard\pardeftab720\sl623\sa200\partightenfactor0

\i0 \cf4 \cb3 We introduce three more mutually reinforcing patterns: the Domain Events, Message Bus, and Handler patterns.\'a0
\i Domain events
\i0 \'a0are a vehicle for capturing the idea that some interactions with a system are triggers for others. We use a\'a0
\i message bus
\i0 \'a0to allow actions to trigger events and call appropriate\'a0
\i handlers
\i0 . We move on to discuss how events can be used as a pattern for integration between services in a microservices architecture. Finally, we distinguish between\'a0
\i commands
\i0 \'a0and\'a0
\i events
\i0 . Our application is now fundamentally a message-processing system.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb3 Command-query responsibility segregation ({\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch12.html#chapter_12_cqrs"}}{\fldrslt \cf5 \strokec5 Chapter\'a012}})\cb1 \
\pard\pardeftab720\sl623\sa200\partightenfactor0

\i0 \cf4 \cb3 We present an example of\'a0
\i command-query responsibility segregation
\i0 , with and without events.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb3 Dependency injection ({\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch13.html#chapter_13_dependency_injection"}}{\fldrslt \cf5 \strokec5 Chapter\'a013}})\cb1 \
\pard\pardeftab720\sl623\sa200\partightenfactor0

\i0 \cf4 \cb3 We tidy up our explicit and implicit dependencies and implement a simple dependency injection framework.\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0

\f0\b\fs41\fsmilli20768 \cf8 \cb3 \strokec8 Addtional Content\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\i\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 How do I get there from here? ({\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/afterword01.html#epilogue_1_how_to_get_there_from_here"}}{\fldrslt \cf5 \strokec5 Epilogue}})\cb1 \
\pard\pardeftab720\sl623\sa200\partightenfactor0

\i0 \cf4 \cb3 Implementing architectural patterns always looks easy when you show a simple example, starting from scratch, but many of you will probably be wondering how to apply these principles to existing software. We\'92ll provide a few pointers in the epilogue and some links to further reading.\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0

\f0\b\fs49 \cf6 \cb3 \strokec6 Example Code and Coding Along\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 You\'92re reading a book, but you\'92ll probably agree with us when we say that the best way to learn about code is to code. We learned most of what we know from pairing with people, writing code with them, and learning by doing, and we\'92d like to re-create that experience as much as possible for you in this book.\cb1 \
\cb3 As a result, we\'92ve structured the book around a single example project (although we do sometimes throw in other examples). We\'92ll build up this project as the chapters progress, as if you\'92ve paired with us and we\'92re explaining what we\'92re doing and why at each step.\cb1 \
\cb3 But to really get to grips with these patterns, you need to mess about with the code and get a feel for how it works. You\'92ll find all the code on GitHub; each chapter has its own branch. You can find\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/cosmicpython/code/branches/all"}}{\fldrslt \cf5 \strokec5 a list}}\'a0of the branches on GitHub as well.\cb1 \
\cb3 Here are three ways you might code along with the book:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl623\partightenfactor0
\ls3\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Start your own repo and try to build up the app as we do, following the examples from listings in the book, and occasionally looking to our repo for hints. A word of warning, however: if you\'92ve read Harry\'92s previous book and coded along with that, you\'92ll find that this book requires you to figure out more on your own; you may need to lean pretty heavily on the working versions on GitHub.\cb1 \uc0\u8232 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Try to apply each pattern, chapter by chapter, to your own (preferably small/toy) project, and see if you can make it work for your use case. This is high risk/high reward (and high effort besides!). It may take quite some work to get things working for the specifics of your project, but on the other hand, you\'92re likely to learn the most.\cb1 \uc0\u8232 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 For less effort, in each chapter we outline an \'93Exercise for the Reader,\'94 and point you to a GitHub location where you can download some partially finished code for the chapter with a few missing parts to write yourself.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl623\sa472\partightenfactor0
\cf4 \cb3 Particularly if you\'92re intending to apply some of these patterns in your own projects, working through a simple example is a great way to safely practice.\cb1 \
\pard\pardeftab720\sl623\sa120\qc\partightenfactor0

\f0\b\fs41\fsmilli20768 \cf7 \cb3 \strokec7 TI\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 At the very least, do a\'a0
\f2 git checkout
\f1 \'a0of the code from our repo as you read each chapter. Being able to jump in and see the code in the context of an actual working app will help answer a lot of questions as you go, and makes everything more real. You\'92ll find instructions for how to do that at the beginning of each chapter.\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0

\f0\b\fs49 \cf6 \cb3 \strokec6 License\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 The code (and the online version of the book) is licensed under a Creative Commons CC BY-NC-ND license, which means you are free to copy and share it with anyone you like, for non-commercial purposes, as long as you give attribution. If you want to re-use any of the content from this book and you have any worries about the license, contact O\'92Reilly at\'a0{\field{\*\fldinst{HYPERLINK "mailto:permissions@oreilly.com"}}{\fldrslt 
\i \cf6 \strokec6 permissions@oreilly.com}}.\cb1 \
\cb3 The print edition is licensed differently; please see the copyright page.\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0

\f0\b\fs49 \cf6 \cb3 \strokec6 Conventions Used in This Book\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 The following typographical conventions are used in this book:\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\i \cf4 \cb3 Italic\cb1 \
\pard\pardeftab720\sl623\sa200\partightenfactor0

\i0 \cf4 \cb3 Indicates new terms, URLs, email addresses, filenames, and file extensions.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f3\i \cf4 \cb3 Constant width
\f1 \cb1 \
\pard\pardeftab720\sl623\sa200\partightenfactor0

\i0 \cf4 \cb3 Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f4\i\b \cf4 \cb3 Constant width bold
\f1\b0 \cb1 \
\pard\pardeftab720\sl623\sa200\partightenfactor0

\i0 \cf4 \cb3 Shows commands or other text that should be typed literally by the user.\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f3\i \cf4 \cb3 Constant width italic
\f1 \cb1 \
\pard\pardeftab720\sl623\sa200\partightenfactor0

\i0 \cf4 \cb3 Shows text that should be replaced with user-supplied values or by values determined by context.\cb1 \
\pard\pardeftab720\sl623\sa120\qc\partightenfactor0

\f0\b\fs41\fsmilli20768 \cf7 \cb3 \strokec7 TIP\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 This element signifies a tip or suggestion.\cb1 \
\pard\pardeftab720\sl623\sa120\qc\partightenfactor0

\f0\b\fs41\fsmilli20768 \cf7 \cb3 \strokec7 NOTE\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 This element signifies a general note.\cb1 \
\pard\pardeftab720\sl623\sa120\qc\partightenfactor0

\f0\b\fs41\fsmilli20768 \cf9 \cb3 \strokec9 WARNING\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 This element indicates a warning or caution.\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0

\f0\b\fs49 \cf6 \cb3 \strokec6 O\'92Reilly Online Learning\cb1 \
\pard\pardeftab720\sl623\sa120\qc\partightenfactor0

\fs41\fsmilli20768 \cf7 \cb3 \strokec7 NOTE\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 For more than 40 years,\'a0{\field{\*\fldinst{HYPERLINK "http://oreilly.com.proxy.library.vcu.edu/"}}{\fldrslt 
\i \cf5 \strokec5 O\'92Reilly Media}}\'a0has provided technology and business training, knowledge, and insight to help companies succeed.\cb1 \
\cb3 Our unique network of experts and innovators share their knowledge and expertise through books, articles, conferences, and our online learning platform. O\'92Reilly\'92s online learning platform gives you on-demand access to live training courses, in-depth learning paths, interactive coding environments, and a vast collection of text and video from O\'92Reilly and 200+ other publishers. For more information, please visit\'a0{\field{\*\fldinst{HYPERLINK "http://oreilly.com.proxy.library.vcu.edu/"}}{\fldrslt 
\i \cf5 \strokec5 http://oreilly.com.proxy.library.vcu.edu}}.\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0

\f0\b\fs49 \cf6 \cb3 \strokec6 How to Contact O\'92Reilly\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 Please address comments and questions concerning this book to the publisher:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl623\sa245\partightenfactor0
\ls4\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 O\'92Reilly Media, Inc.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 1005 Gravenstein Highway North\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Sebastopol, CA 95472\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 800-998-9938 (in the United States or Canada)\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 707-829-0515 (international or local)\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 707-829-0104 (fax)\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0
\cf4 \cb3 We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at\'a0{\field{\*\fldinst{HYPERLINK "https://oreil.ly/architecture-patterns-python"}}{\fldrslt 
\i \cf5 \strokec5 https://oreil.ly/architecture-patterns-python}}.\cb1 \
\cb3 Email\'a0{\field{\*\fldinst{HYPERLINK "mailto:bookquestions@oreilly.com"}}{\fldrslt 
\i \cf6 \strokec6 bookquestions@oreilly.com}}\'a0to comment or ask technical questions about this book.\cb1 \
\cb3 For more information about our books, courses, conferences, and news, see our website at\'a0{\field{\*\fldinst{HYPERLINK "http://www.oreilly.com.proxy.library.vcu.edu/"}}{\fldrslt 
\i \cf5 \strokec5 http://www.oreilly.com.proxy.library.vcu.edu}}.\cb1 \
\cb3 Find us on Facebook:\'a0{\field{\*\fldinst{HYPERLINK "http://facebook.com/oreilly"}}{\fldrslt 
\i \cf5 \strokec5 http://facebook.com/oreilly}}\cb1 \
\cb3 Follow us on Twitter:\'a0{\field{\*\fldinst{HYPERLINK "http://twitter.com/oreillymedia"}}{\fldrslt 
\i \cf5 \strokec5 http://twitter.com/oreillymedia}}\cb1 \
\cb3 Watch us on YouTube:\'a0{\field{\*\fldinst{HYPERLINK "http://www.youtube.com/oreillymedia"}}{\fldrslt 
\i \cf5 \strokec5 http://www.youtube.com/oreillymedia}}\cb1 \
\pard\pardeftab720\sl623\sa160\partightenfactor0

\f0\b\fs49 \cf6 \cb3 \strokec6 Acknowledgments\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\f1\b0\fs37\fsmilli18880 \cf4 \cb3 \strokec4 To our tech reviewers, David Seddon, Ed Jung, and Hynek Schlawack: we absolutely do not deserve you. You are all incredibly dedicated, conscientious, and rigorous. Each one of you is immensely smart, and your different points of view were both useful and complementary to each other. Thank you from the bottom of our hearts.\cb1 \
\cb3 Gigantic thanks also to our Early Release readers for their comments and suggestions: Ian Cooper, Abdullah Ariff, Jonathan Meier, Gil Gon\'e7alves, Matthieu Choplin, Ben Judson, James Gregory, \uc0\u321 ukasz Lechowicz, Clinton Roy, Vitorino Ara\'fajo, Susan Goodbody, Josh Harwood, Daniel Butler, Liu Haibin, Jimmy Davies, Ignacio Vergara Kausel, Gaia Canestrani, Renne Rocha, pedroabi, Ashia Zawaduk, Jostein Leira, Brandon Rhodes, and many more; our apologies if we missed you on this list.\cb1 \
\cb3 Super-mega-thanks to our editor Corbin Collins for his gentle chivvying, and for being a tireless advocate of the reader. Similarly-superlative thanks to the production staff, Katherine Tozer, Sharon Wilkey, Ellen Troutman-Zaig, and Rebecca Demarest, for your dedication, professionalism, and attention to detail. This book is immeasurably improved thanks to you.\cb1 \
\cb3 Any errors remaining in the book are our own, naturally.\
\
\
-==\'97=-=-==-=-=-\
\pard\pardeftab720\sl560\sa1000\qc\partightenfactor0

\f0\b\fs48 \cf8 \strokec8 Part I.\'a0Building an Architecture to Support Domain Modeling\
\pard\pardeftab720\sl591\partightenfactor0

\f1\i\b0\fs35\fsmilli17936 \cf4 \strokec4 Most developers have never seen a domain model, only a data model.\cb1 \
\pard\pardeftab720\li600\sl591\sa200\qr\partightenfactor0

\i0 \cf4 \cb3 Cyrille Martraire,\'a0DDD EU 2017\cb1 \
\pard\pardeftab720\sl623\sa472\partightenfactor0

\fs37\fsmilli18880 \cf4 \cb3 Most developers we talk to about architecture have a nagging sense that things could be better. They are often trying to rescue a system that has gone wrong somehow, and are trying to put some structure back into a ball of mud. They know that their business logic shouldn\'92t be spread all over the place, but they have no idea how to fix it.\
We\'92ve found that many developers, when asked to design a new system, will immediately start to build a database schema, with the object model treated as an afterthought. This is where it all starts to go wrong. Instead,\'a0
\i behavior should come first and drive our storage requirements.
\i0 \'a0After all, our customers don\'92t care about the data model. They care about what the system\'a0
\i does
\i0 ; otherwise they\'92d just use a spreadsheet.\
The first part of the book looks at how to build a rich object model through TDD (in\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch01.html#chapter_01_domain_model"}}{\fldrslt \cf5 \strokec5 Chapter\'a01}}), and then we\'92ll show how to keep that model decoupled from technical concerns. We show how to build persistence-ignorant code and how to create stable APIs around our domain so that we can refactor aggressively.\
To do that, we present four key design patterns:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl623\partightenfactor0
\ls5\ilvl0\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 The\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch02.html#chapter_02_repository"}}{\fldrslt \cf5 \strokec5 Repository pattern}}, an abstraction over the idea of persistent storage\cb1 \uc0\u8232 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 The\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch04.html#chapter_04_service_layer"}}{\fldrslt \cf5 \strokec5 Service Layer}}\'a0pattern to clearly define where our use cases begin and end\cb1 \uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl623\partightenfactor0
\ls6\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 The\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch06.html#chapter_06_uow"}}{\fldrslt \cf5 \strokec5 Unit of Work pattern}}\'a0to provide atomic operations\cb1 \uc0\u8232 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 The\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch07.html#chapter_07_aggregate"}}{\fldrslt \cf5 \strokec5 Aggregate pattern}}\'a0to enforce the integrity of our data\cb1 \uc0\u8232 \
\pard\pardeftab720\sl623\sa472\partightenfactor0
\cf4 \cb3 If you\'92d like a picture of where we\'92re going, take a look at\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/part01.html#part1_components_diagram"}}{\fldrslt \cf5 \strokec5 Figure\'a0I-1}}, but don\'92t worry if none of it makes sense yet! We introduce each box in the figure, one by one, throughout this part of the book.\
We also take a little time out to talk about\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/ch03.html#chapter_03_abstractions"}}{\fldrslt \cf5 \strokec5 coupling and abstractions}}, illustrating it with a simple example that shows how and why we choose our abstractions.\
Three appendices are further explorations of the content from Part I:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl623\partightenfactor0
\ls7\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/app02.html#appendix_project_structure"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Appendix\'a0B}}\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \'a0is a write-up of the infrastructure for our example code: how we build and run the Docker images, where we manage configuration info, and how we run different types of tests.\cb1 \uc0\u8232 \
\ls7\ilvl0\cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/app03.html#appendix_csvs"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Appendix\'a0C}}\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \'a0is a \'93proof is in the pudding\'94 kind of content, showing how easy it is to swap out our entire infrastructure\'97the Flask API, the ORM, and Postgres\'97for a totally different I/O model involving a CLI and CSVs.\cb1 \uc0\u8232 \
\ls7\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Finally,\'a0{\field{\*\fldinst{HYPERLINK "https://learning-oreilly-com.proxy.library.vcu.edu/library/view/architecture-patterns-with/9781492052197/app04.html#appendix_django"}}{\fldrslt \cf5 \strokec5 Appendix\'a0D}}\'a0may be of interest if you\'92re wondering how these patterns might look if using Django instead of Flask and SQLAlchemy.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \cb3 \
\pard\pardeftab720\sl623\sa472\partightenfactor0
\cf4 \
\pard\pardeftab720\sl623\sa472\partightenfactor0
\cf4 \cb1 \
}