{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red26\green28\blue40;
}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c13333\c14902\c20784;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww16840\viewh14080\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Software Design Patterns\
\
\
At a high level the design patterns are classified as \
Structural, Behavioral, Creational\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b\fs50 \cf0 STRUCTURAL\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
Adapter\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 An adapter helps to join two incompatible interfaces to work together. So, if you have an interface with implementing classes.\
\
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf2 Decorator\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 The decorator pattern extends the functionality of an object dynamically.\
\
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf2 Bridge\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 Decouples an abstraction from its implementation so that the two can vary independently. \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs50 \cf0 \cb1 \kerning1\expnd0\expndtw0 BEHAVIORAL\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf2 Dependency injection\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 Dependency is used when you want to separate the dependencies of an Object, and pass them to dependent object during run time. \
\
\
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf2 Iterator\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 This pattern is used to get a way to access the elements of a collection object in sequential manner without exposing its underlying representation.\
\
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf2 Observer\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 Observer pattern is used such that if an object is changed, its dependents objects get notified of that change, thus there is 1:M relationship.\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs50 \cf0 \cb1 \kerning1\expnd0\expndtw0 CREATIONAL
\f1\b0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf2 Factory\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 This pattern defines a way for creating object(s) during run time.\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf2 Singleton\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 The Singleton Pattern is a pattern that ensures that there is only ever one single instance of a class, And it provides a global way to get to that instance.\
\
\
-==\'97=-=-=-=-==-=\'97==\
https://dzone.com/articles/design-patterns-for-microservices\
\
Microservice Architecture Principles\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb3 \outl0\strokewidth0 \strokec4 principles microservice architecture has been built:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Scalability\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Availability\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Resiliency\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Independent, autonomous\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Decentralized governance\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Failure isolation\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Auto-Provisioning\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	8.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Continuous delivery through DevOps\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 \outl0\strokewidth0 \
Design Patterns for Microservices\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs50 \cf0 \cb1 \kerning1\expnd0\expndtw0 DECOMPOSITION PATTERNS\
\
\pard\pardeftab720\partightenfactor0

\f1\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
Strangler\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 This patterns very well suitable for 
\f2\fs38 \cf4 \cb3 \outl0\strokewidth0 \strokec4 brownfield applications, which are big, monolithic applications
\f1\fs32 \cf2 \cb3 \outl0\strokewidth0 .\

\f0 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \outl0\strokewidth0 \strokec4 The Strangler pattern is based on an analogy to a vine that strangles a tree that it\'92s wrapped around. This solution works well with web applications, where a\'a0call goes back and forth, and for each URI call, a service can be broken into different domains and hosted as separate services. The idea is to do it one domain at a time. This creates two separate applications that live side by side in the same URI space. Eventually, the newly refactored application \'93strangles\'94 or replaces the original application until finally you can shut off the monolithic application.
\f2\fs38 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 \outl0\strokewidth0 \
\
\
 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs50 \cf0 \cb1 \kerning1\expnd0\expndtw0 INTEGRATION PATTERNS\
\
\pard\pardeftab720\partightenfactor0

\f1\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
API Gateway\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 T
\f0\b\fs50 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
Aggregator\cb1 \
\pard\pardeftab720\sl440\partightenfactor0

\f2\b0\fs38 \cf4 \cb3 \outl0\strokewidth0 \strokec4 When breaking the business functionality into several smaller logical pieces of code, it becomes necessary to think about how to collaborate the data returned by each service. This responsibility cannot be left with the consumer, as then it might need to understand the internal implementation of the producer application.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs50 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 DATABASE PATTERNS
\f1\b0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf2 SAGA\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs32 \cf4 \cb3 \outl0\strokewidth0 \strokec4 When each service has its own database and a business transaction spans multiple services, how do we ensure data consistency across services?\'a0\cf2 \cb3 \outl0\strokewidth0 \
\cf4 \cb3 \outl0\strokewidth0 \strokec4 A Saga represents a high-level business process that consists of several sub requests, which each update data within a single service. Each request has a compensating request that is executed when the request fails. It can be implemented in two ways:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Choreography \'97 When there is no central coordination, each service produces and listens to another service\'92s events and decides if an action should be taken or not.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Orchestration \'97 An orchestrator (object) takes responsibility for a saga\'92s decision making and sequencing business logic.
\b\fs50 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf2 OBSERVABILITY\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs32 \cf4 \cb3 \outl0\strokewidth0 \strokec4 An application consists of multiple service instances that are running on multiple machines.\'a0Each service instance generates a log file in a standardized format. How can we understand the application behavior through logs for a particular request?\
We need a centralized logging service that aggregates logs from each service instance. Users can search and analyze the logs. They can configure alerts that are triggered when certain messages appear in the logs. For example, PCF does have Loggeregator, which collects logs from each component (router, controller, diego, etc...) of the PCF platform along with applications. AWS Cloud Watch also does the same.
\f2\fs38 \
\pard\pardeftab720\sl440\partightenfactor0

\f1\fs32 \cf2 \cb3 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf2 CQRS\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 T
\f0\b\fs50 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
CROSS-CUTTING CONCERN PATTERNS\
\pard\pardeftab720\partightenfactor0

\f1\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
SERVICE DISCOVERY\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 T\
\
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf2 CQRS\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 T\
\

\f0\b\fs50 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
}