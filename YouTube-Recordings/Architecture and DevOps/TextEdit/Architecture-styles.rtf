{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Charter-Roman;}
{\colortbl;\red255\green255\blue255;\red18\green18\blue18;\red255\green255\blue255;\red83\green83\blue83;
\red0\green0\blue0;\red31\green31\blue31;}
{\*\expandedcolortbl;;\cssrgb\c9020\c9020\c9020;\cssrgb\c100000\c100000\c100000;\cssrgb\c40000\c40000\c40000;
\cssrgb\c0\c0\c0;\cssrgb\c16078\c16078\c16078;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\tx0\tx492\pardeftab720\fi496\sl360\partightenfactor0

\f0\fs20 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\tx0\tx492\pardeftab720\fi496\sl264\slmult1\partightenfactor0
\cf2 Hello\
 \cf4 [[slnc 400]]\cf2 \
In the last video \cf4 [[slnc 300]]\cf5 \'a0\cf2 we talked about \cf4 [[slnc 300]]\cf2  Architecture in Azure and \cf4 [[slnc 300]]\cf2  and went over some of the processes steps for defining a well architected framework and solution design.\
\cf4 [[slnc 400]]\cf2 \
Today \cf4 [[slnc 300]]\cf5 \'a0\cf2 we talked about \cf4 [[slnc 300]]\cf2  Architecture styles and \cf4 [[slnc 300]]\cf2  where possible with some example scenarios or use cases.\
What all would it take\cf4 [[slnc 300]]\cf2  to build a well framed architecture \cf4 [[slnc 300]]\cf2   that is sound and effective \cf4 [[slnc 300]]\cf2  so the organization \cf4 [[slnc 300]]\cf2  and customers can grow \cf4 [[slnc 1600]]\cf2  \
\
\
Before that \cf4 [[slnc 300]]\cf2   \
Welcome to \cf4 [[slnc 300]]\cf2  Try Cloud Works \cf4 [[slnc 300]]\cf2  Engineers \cf4 [[slnc 600]]\cf2   \
Don\'92t forget \cf4 [[slnc 300]]\cf2  to subscribe to our channel \cf4 [[slnc 300]]\cf2  if you like it\cf4 [[slnc 1600]]\cf2  \
 Well \'85 \cf4 [[slnc 600]]\cf2  \
\
\
\pard\tx0\tx492\pardeftab720\fi496\partightenfactor0

\fs24 \cf2 Architecture styles are numerous and some are still evolving while others have gone into a complete transformation.\
\
We will go over some of the Architecture styles and get a basic understanding. That will allow us to get a good head start and open the door for any further deep dive.\
\

\b \
Plug-in Architecture
\b0 \
\
\pard\pardeftab720\sl520\partightenfactor0

\f1\fs42 \cf6 \cb3 \outl0\strokewidth0 \strokec6 The plug-ins are stand-alone, independent components that contain specialized processing, additional features, and custom code that is meant to enhance or extend the core system to produce additional capabilities.\

\f0\fs24 \cf2 \cb3 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \outl0\strokewidth0 \strokec6 The plug-in architecture consists of two components: a\'a0core systemand\'a0plug-in modules.\cf2 \cb3 \outl0\strokewidth0 \
\pard\tx0\tx492\pardeftab720\fi496\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \outl0\strokewidth0 \strokec6 The main key design here is to allow adding additional features as plugins to the core application, providing extensibility, flexibility, and isolation of application features and customs processing logic.\cf2 \cb3 \outl0\strokewidth0 \
\pard\pardeftab720\sl520\partightenfactor0

\f1\fs42 \cf6 \cb3 \outl0\strokewidth0 \strokec6 The specific rules and processing of the plugins are separate from the core system.
\f0\fs24 \cf2 \cb3 \outl0\strokewidth0 \
\pard\tx0\tx492\pardeftab720\fi496\partightenfactor0
\cf2 \
\pard\pardeftab720\sl520\partightenfactor0

\f1\fs42 \cf6 \cb3 \outl0\strokewidth0 \strokec6 If a glueing a plugin to an existing core system is a pain due to having an incompatible interface, it is common to\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/OmarElGabry/DesignPatterns#adapter"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 create an adapter}}\'a0between the plug-in and the core system. And so the core doesn\'92t need a specialized code for each incompatible plug-in.\

\f0\fs24 \cf2 \cb3 \outl0\strokewidth0 \
}