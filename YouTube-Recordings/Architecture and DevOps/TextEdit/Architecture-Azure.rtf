{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;\red18\green18\blue18;\red255\green255\blue255;
\red83\green83\blue83;\red0\green0\blue0;\red0\green0\blue0;\red18\green18\blue18;}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;\cssrgb\c9020\c9020\c9020;\cssrgb\c100000\c100000\c100000;
\cssrgb\c40000\c40000\c40000;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c0\c90196;\cssrgb\c9020\c9020\c9020;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww9260\viewh14660\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs20 \cf2 \
\pard\tx0\tx492\pardeftab720\fi496\sl360\partightenfactor0
\cf3 \cb4 \expnd0\expndtw0\kerning0
\
\pard\tx0\tx492\pardeftab720\fi496\sl264\slmult1\partightenfactor0
\cf3 Hello\
 \cf5 [[slnc 400]]\cf3 \
In the last video \cf5 [[slnc 300]]\cf6 \'a0\cf3 we talked about \cf5 [[slnc 300]]\cf3  what is DevOps and \cf5 [[slnc 300]]\cf3  some of the primary practice areas\
\cf5 [[slnc 400]]\cf3 \
Today we will talk about \cf5 [[slnc 300]] building a well defined [[slnc 300]]\cf3  Architecture in Azure \cf5 [[slnc 600]]\cf3 \
What all would it take\cf5 [[slnc 300]]\cf3  to build a well framed architecture \cf5 [[slnc 300]]\cf3   that is sound and effective \cf5 [[slnc 300]]\cf3  so the organization \cf5 [[slnc 300]]\cf3  and customers can grow \cf5 [[slnc 1600]]\cf3  \
\
\
Before that \cf5 [[slnc 300]]\cf3   \
Welcome to \cf5 [[slnc 300]]\cf3  Try Cloud Works \cf5 [[slnc 300]]\cf3  Engineers \cf5 [[slnc 600]]\cf3   \
Don\'92t forget \cf5 [[slnc 300]]\cf3  to subscribe to our channel \cf5 [[slnc 300]]\cf3  if you like it\cf5 [[slnc 1600]]\cf3  \
 Well \'85 \cf5 [[slnc 600]]\cf3  \
\
\
Building an application Architecture \cf5 [[slnc 300]]\cf3  is a series of steps one may take \cf5 [[slnc 300]]\cf3  until implementation.\cf5 [[slnc 300]]\cf3   For each step \cf5 [[slnc 300]]\cf3  there are key decisions \cf5 [[slnc 300]]\cf3  and a better understanding of \cf5 [[slnc 300]]\cf3  what the implementation is going to \cf5 [[slnc 300]]\cf3  look like may be found. \cf5 [[slnc 1400]]\cf3  \
\
\
The key Steps are \cf5 [[slnc 300]]\cf3  Architecture style, \cf5 [[slnc 300]]\cf3  Technology choices, \cf5 [[slnc 300]]\cf3  Application Architecture, \cf5 [[slnc 300]]\cf3  established patterns, \cf5 [[slnc 300]]\cf3  best practices, and \cf5 [[slnc 300]]\cf3  Well ArchitectedFramework  \cf5 [[slnc 1600]]\cf3  \
\
\
\
There are different 
\b architecture styles
\b0  available \cf5 [[slnc 300]]\cf3  to select based on the use case \cf5 [[slnc 300]]\cf3  or nature of the application, \cf5 [[slnc 300]]\cf3  \
For example, \cf5 [[slnc 300]]\cf3   it can be n-tier web application, \cf5 [[slnc 300]]\cf3  or event driven application \cf5 [[slnc 300]]\cf3   or Microservices based application \cf5 [[slnc 300]]\cf3   or big data or \cf5 [[slnc 300]]\cf3  big compute application. There are numerous distinct \cf5 [[slnc 300]]\cf3  architecture styles for \cf5 [[slnc 300]]\cf3  each of these use case scenarios. \cf5 [[slnc 1600]]\cf3  \
\
Knowing the architecture style, \cf5 [[slnc 300]]\cf3  at a high level list down the 
\b technology areas
\b0  \cf5 [[slnc 300]]\cf3  that will be required to build the solution \cf5 [[slnc 300]]\cf3  For example does it require data store \cf5 [[slnc 300]]\cf3   or data bases; \cf5 [[slnc 300]]\cf3   does it require compute or \cf5 [[slnc 300]]\cf3  messaging features and things like that. \cf5 [[slnc 600]]\cf3  Within each of these area there are lots of options and choices can be narrowed \cf5 [[slnc 300]]\cf3   as much as they are known. \cf5 [[slnc 1600]]\cf3  \
\
\
\
Once you got the architecture style \cf5 [[slnc 300]]\cf3   and
\b  technology choices
\b0  \cf5 [[slnc 300]]\cf3   \cf5 [[slnc 300]]\cf3  There are lots of technology choices available \cf5 [[slnc 300]]\cf3  and as they continuously evolve, \cf5 [[slnc 300]]\cf3   they can help to design, build  \cf5 [[slnc 300]]\cf3  and continuously improve the architecture. \cf5 [[slnc 1600]]\cf3  \
Choosing a right technology \cf5 [[slnc 300]]\cf3  and getting more specific selection \cf5 [[slnc 300]]\cf3  out of many technology choices in that area \cf5 [[slnc 300]]\cf3  will help to create a finer architecture artifact. \cf5 [[slnc 1600]]\cf3  \
For example, \cf5 [[slnc 300]]\cf3  choosing a compute service, \cf5 [[slnc 300]]\cf3  can it be a VM?  \cf5 [[slnc 300]]\cf3  or a Function \cf5 [[slnc 300]]\cf3  or containers \cf5 [[slnc 300]]\cf3 , a right choice will be required for building an architect solution \cf5 [[slnc 1600]]\cf3  \
\
\
\
\
Next step is to get into specifics of the application design \cf5 [[slnc 600]]\cf3  It is always good to refer to any existing 
\b reference architectures
\b0  \cf5 [[slnc 600]]\cf3  Most of the times \cf5 [[slnc 300]]\cf3  reference architectures include recommended practices, along with \cf5 [[slnc 300]]\cf3  considerations for scalability, \cf5 [[slnc 300]]\cf3  \cf5 performance\cf3  , \cf5 [[slnc 300]]\cf3  availability, \cf5 [[slnc 300]]\cf3  resilience, \cf5 [[slnc 300]]\cf3  and other aspects of the design. \cf5 [[slnc 2400]]\cf3  \
\
\
\
So far so good, \cf5 [[slnc 600]]\cf3  next comes applying \cf5 [[slnc 300]]\cf3  some good
\b  design principles 
\b0 \cf5 [[slnc 300]]\cf3  and verify if there are any \cf5 [[slnc 300]]\cf3  gaps on those. \cf5 [[slnc 600]]\cf3  \
It is recommended \cf5 [[slnc 300]]\cf3  to follow these design principles, \cf5 [[slnc 600]]\cf3  \
Design for self healing, \cf5 [[slnc 300]]\cf3  make all things redundant, \cf5 [[slnc 300]]\cf3  dieting to scale out, \cf5 [[slnc 300]]\cf3  partition around limits, \cf5 [[slnc 300]]\cf3  design for operations, \cf5 [[slnc 300]]\cf3  minimize co-ordination, \cf5 [[slnc 300]]\cf3  use managed services, \cf5 [[slnc 300]]\cf3  use the best data store, build the needs of business, \cf5 [[slnc 300]]\cf3  design for evolution \cf5 [[slnc 2400]]\cf3  \
\
\
\
There are well 
\b established patterns 
\b0 \cf5 [[slnc 300]]\cf3  and best practices that can be used as \cf5 [[slnc 300]]\cf3  additional guidance for building well architected solutions \cf5 [[slnc 300]]\cf3  in Azure Cloud. \cf5 [[slnc 600]]\cf3  The design patterns could be pertaining to cloud, \cf5 [[slnc 300]]\cf3   or pertaining to software development, \cf5 [[slnc 300]]\cf3  some are pertaining security patterns, \cf5 [[slnc 300]]\cf3  or pertaining to operational excellence \cf5 [[slnc 1300]]\cf3   Irrespective to what area they are, \cf5 [[slnc 300]]\cf3   it is good to use well established patterns \cf5 [[slnc 300]]\cf3  to solve the problem or approach \cf5 [[slnc 600]]\cf3  There could be challenges \cf5 [[slnc 300]]\cf3  in cloud development, with regard to \cf5 [[slnc 300]]\cf3  Availability, \cf5 [[slnc 300]]\cf3  Data Management, \cf5 [[slnc 300]]\cf3  Messaging, \cf5 [[slnc 300]]\cf3  Management and monitoring, \cf5 [[slnc 300]]\cf3  Performance and Scalability, \cf5 [[slnc 300]]\cf3  Resiliency, \cf5 [[slnc 300]]\cf3  and Security. \cf5 [[slnc 2400]]\cf3  \
\
\
There are patterns that address \cf5 [[slnc 700]]\cf3  and solve for any problem in that category. \cf5 [[slnc 300]]\cf3  Some of the patterns \cf5 [[slnc 300]]\cf3   are listed as shown \cf5 [[slnc 2600]]\cf3  \
\
\
For messaging patterns - \cf5 [[slnc 700]]\cf3  Asynchronous req-res, \cf5 [[slnc 300]]\cf3  Claim check, \cf5 [[slnc 300]]\cf3  competing consumers, \cf5 [[slnc 300]]\cf3  publisher  /\cf5 [[slnc 300]]\cf3  subscriber \cf5 [[slnc 300]]\cf3  Sequential convoy, \cf5 [[slnc 300]]\cf3  and scheduler agent supervisor \cf5 [[slnc 2600]]\cf3  \
\
\
For Management and monitoring patterns, \cf5 [[slnc 700]]\cf3  Anti-corruption layer, \cf5 [[slnc 300]]\cf3  Ambassador, \cf5 [[slnc 300]]\cf3  external configuration store, \cf5 [[slnc 300]]\cf3  Gateway aggregation, \cf5 [[slnc 300]]\cf3  Gateway routing, \cf5 [[slnc 300]]\cf3  health endpoint monitoring, \cf5 [[slnc 300]]\cf3  Sidecar, \cf5 [[slnc 300]]\cf3  Strangler, \cf5 [[slnc 2600]]\cf3  \
\
\
For Performance and scalability patterns, \cf5 [[slnc 700]]\cf3  Cache-aside, \cf5 [[slnc 300]]\cf3  Choreography, \cf5 [[slnc 300]]\cf3  CQRS, \cf5 [[slnc 300]]\cf3  Deployment Stamps, \cf5 [[slnc 300]]\cf3  Event Sourcing, \cf5 [[slnc 300]]\cf3  Geodes, \cf5 [[slnc 300]]\cf3  index table, \cf5 [[slnc 300]]\cf3  Materialized view, \cf5 [[slnc 300]]\cf3  Priority queue, \cf5 [[slnc 300]]\cf3  queue based load leveling, \cf5 [[slnc 300]]\cf3  Sharding, \cf5 [[slnc 300]]\cf3  static content hosting, \cf5 [[slnc 300]]\cf3  throttling \cf5 [[slnc 2600]]\cf3  \
\
\
For Resiliency patterns, \cf5 [[slnc 700]]\cf3  Bulkhead, \cf5 [[slnc 300]]\cf3  Circuit Breaker, \cf5 [[slnc 300]]\cf3  Compensating transaction, \cf5 [[slnc 300]]\cf3  leader election, \cf5 [[slnc 300]]\cf3  Retry, scheduler agent supervisor  \cf5 [[slnc 2600]]\cf3  \
\
\
For Security patterns, \cf5 [[slnc 700]]\cf3  Valet key, \cf5 [[slnc 300]]\cf3  Gatekeeper, \cf5 [[slnc 2600]]\cf3  \
\
\
\
There are five key areas of importance \cf5 [[slnc 300]]\cf3  one can look at for building a well architected solution. \cf5 [[slnc 600]]\cf3  \
They are \cf5 [[slnc 300]]\cf3  Cost optimization \cf5 [[slnc 300]]\cf3  Reliability \cf5 [[slnc 300]]\cf3   Operational excellence \cf5 [[slnc 300]]\cf3  Performance efficiency \cf5 [[slnc 300]]\cf3  Security \cf5 [[slnc 1200]]\cf3  \
We will go over each of these \cf5 [[slnc 300]]\cf3  as Azure calls it as five pillars \cf5 [[slnc 300]]\cf3  in another video \cf5 [[slnc 900]] \cf3 and get a fair understanding of Architecture in Azure.  \cf5 [[slnc 2600]]\cf3  \
\
\
\pard\tx0\tx492\pardeftab720\fi496\sl360\partightenfactor0
\cf3 Well that\'92s it for now and I hope we have covered \cf5 \cb4 [[slnc 200]]\cf3 \cb4   enough to get started on building architecture in Azure \cf5 \cb4 [[slnc 500]]\cf3 \cb4  to ensure reliability, scalability and efficiency \cf5 \cb4 [[slnc 500]]\cf3 \cb4  in the cloud \cf5 \cb4 [[slnc 2600]]\cf3 \cb4  \
\
In the next Video \cf5 \cb4 [[slnc 200]]\cf3 \cb4  we can take a look at the five pillars \cf5 \cb4 [[slnc 600]]\cf3 \cb4  of well architected framework in Azure  \cf5 \cb4 [[slnc 2000]]\cf3 \cb4  \
\
\
\pard\tx0\tx492\pardeftab720\fi496\partightenfactor0
\cf3 \cb4 So shall we see you in next Video \cf5 [[slnc 300]]\cf3   on Well Architected Framework in Azure \cf5 [[slnc 1200]]\cf3  \
\pard\tx0\tx492\pardeftab720\fi496\sl360\partightenfactor0
\cf3 \cb4 \
Until then \cf5 \cb4 [[slnc 900]]\cf3 \cb4  \
Chau \cf5 \cb4 [[slnc 600]]\cf3 \cb4   and Have a good day \cf5 \cb4 [[slnc 1200]]\cf3 \cb4  Thank YOU \

\f1 \
\
\
\
\
\
\
\

\f0 \
\pard\tx0\tx492\pardeftab720\fi496\sl264\slmult1\partightenfactor0
\cf3 \
Distributed services platforms \cf5 [[slnc 300]]\cf3  are revolutionizing with the advent of noSQL databases \cf5 [[slnc 300]]\cf3  and rendering n-tier architecture obsolete. \cf5 [[slnc 300]]\cf3  The newer Architecture styles \cf5 [[slnc 300]]\cf3   with service oriented design patterns \cf5 [[slnc 300]]\cf3   and Microservices approach take the front stage. \cf5 [[slnc 2600]]\cf3  \
\
Azure offers Service Fabric \cf5 [[slnc 300]]\cf3  which is a distributed services platform \cf5 [[slnc 300]]\cf3  that can run many Azure services \cf5 [[slnc 300]]\cf3  like \cf5 [[slnc 300]]\cf3  Event Hubs, \cf5 [[slnc 300]]\cf3  Event Grid, \cf5 [[slnc 300]]\cf3  Azure SQL database,\cf5 [[slnc 300]]\cf3   Azure Cosmos DB, \cf5 [[slnc 300]]\cf3  and other core Azure resource providers \cf5 [[slnc 300]]\cf3  in Compute, \cf5 [[slnc 300]]\cf3  Networking, \cf5 [[slnc 300]]\cf3  Storage \cf5 [[slnc 2600]]\cf3  \
\
\
Applications are decomposed into smaller, \cf5 [[slnc 300]]\cf3  decentralized services. \cf5 [[slnc 600]]\cf3  These services communicate through \cf5 [[slnc 300]]\cf3  APIs or \cf5 [[slnc 300]]\cf3  by using asynchronous messaging or \cf5 [[slnc 300]]\cf3  eventing \cf5 [[slnc 600]]\cf3  Application state is distributed. \cf5 [[slnc 600]]\cf3  Operations are automated \cf5 [[slnc 300]]\cf3  and done in parallel and asynchronously \cf5 [[slnc 2600]]\cf3  \
\
\
\
\
\
Application Architecture \
	(Reference Architectures, Design Principles, Design Patterns, Best Practices)\
\
\
Architecture Styles\
	(N-tier, Microservices, Event driven, web-queue-worker, big data, big compute)\
\
\
Distributed Systems or Services Architecture\
(Service Fabric Vs Kubernetes/AKS, \
\
\
\
\
https://www.youtube.com/watch?v=MrfcP6dS6mU\
\
Very complicated \
Failure detection, reliable broadcast or multicast \
Solving systematically, how to layer the systems so that correctness of the system is not compromised. \
\
Lowermost transport subsystem layer and on top of it is Federated subsystem \
Communication subsystem that is responsible for delivering the message to the target system. \
\
No layer is dependent on the layer above it .. It depends on the one below it or on the side of it. \
\
Replicated systems are working\
Reliable services are working\
Reliable data structures are working\
\
Service Fabric solves certain list of problems. What that means one does not have to repeatedly have to solve those again and again\'85\
\
What that means is, since running on commodity hardware,  one does not have to think about leader selection, n-copies of code running, cluster the machines, how to bring if a copy does, patching and upgrading the code without losing availability..\
\
\
Service Fabric Platform / Micro Services platform\
Container orchestrators / Micro services platform\
Running a host (system or container or process) is different from running  micro services there is a distinction. \
\
In the stateful world the difference is very obvious\'85 For state one has to reach out to some STORE for persistent that lives beyond the session..\
\
In the stateless world request and response is dependent on any state from earlier sessions and so any machine can respond to any request.\
\
\
Service Fabric uses similar data structures that application uses and does not have to depend on external resources\'85 \
\
System goes from one consistent state to another consistent state. It maintains the mutant state in complete sequence of transaction and does not have to \
\
Programing \
\
\
The goal of Service Fabric is to abstract away hard distributed problems\'85and give them nice abstractions.. \
\
Service mesh will take care of the delivery of \
Resuming sessions, TLS or TCP or HTTP or \
Knowing when the target microservice fails by having a logical name..\
\
Service proxy tracks and sends the message to the struggling target system while it is recovering\'85\
\
Service Mesh where communication between micro services is monitored by Service Fabric.. generate graph.. retry messages underneath\
\
Short circuiting \'85 \
\
A/B testing\'85\
\
\
Service fabric is a living entity.. adding features. Automatic scale the load patterns\'85 \
\
Reliability state machine.. workflow patterns.. \
\
\
\pard\pardeftab720\sl340\partightenfactor0
\cf7 \cb4 \outl0\strokewidth0 \strokec7 Intelligent Edge distributed systems\
\
\cf3 \cb4 \outl0\strokewidth0 \
\pard\tx0\tx492\pardeftab720\fi496\sl264\slmult1\partightenfactor0
\cf3 \
Technology Choices\
	(compute, data stores, messaging)\
\
\
Well Architected Framework\
	(CROPS)\
\
\
\
\
\
-=-=-=-=-=-=-=-=-=-=-=\
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 \cb1 \kerning1\expnd0\expndtw0 \
\
\
\
\
\
 solution architecture practices and techniques\
\
\
In Azure \
 building and designing data and analytics on enterprise solutions such as Azure - Data Factory, Log Analytics, Databricks, Synapse, Power BI, ADLS Gen2, Polybase and Machine Learning/AI.\
\
designing data pipelines, ingestion, storage, prep-train, model and serve using above technologies, Automating\'a0Azure\'a0Workloads, Data quality, Governance/standards, Security and legal compliance in the Azure architecture\
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls1\ilvl0\cf8 \cb4 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 Experience building or operating solutions by using core infrastructure technology such as data storage, compute, and networking\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\
		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 Experience building or operating technology systems to solve business problems\cb1 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
\
\
}